/**
* DRP
* This is the main server of QLM's DRP system
*
* OpenAPI spec version: 1.0.0
* Contact: akos.hollo-szabo@qlndc.hu
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package web.apis

// ktor 0.9.x is missing io.ktor.locations.DELETE, this adds it.
// see https://github.com/ktorio/ktor/issues/288
import com.google.gson.Gson
import data.web.GPS
import data.web.Graph
import data.web.Setting
import data.web.Task
import io.ktor.application.*
import io.ktor.http.*
import io.ktor.locations.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import web.Paths
import web.delete
import java.math.BigDecimal
import java.util.*

@KtorExperimentalLocationsAPI
fun Route.SetupApi() {
    val gson = Gson()

    route("/setup/objective") {
        post {
            //val name : Objective = call.receive()
            call.respond(
                HttpStatusCode.OK,
                gson.toJson(UUID.randomUUID().toString())
            )
        }
    }
    

    route("/setup/salesman") {
        post {
            //val name : Salesman = call.receive()
            call.respond(
                HttpStatusCode.OK,
                gson.toJson(UUID.randomUUID().toString())
            )
        }
    }
    

    route("/setup/setting") {
        post {
            //val name : Setting = call.receive()
            call.respond(
                HttpStatusCode.OK,
                gson.toJson(UUID.randomUUID().toString())
            )
        }
    }
    

    route("/setup/task") {
        post {
            //val name : Task = call.receive()
            call.respond(
                HttpStatusCode.OK,
                gson.toJson(UUID.randomUUID().toString())
            )
        }
    }
    

    get<Paths.listAlgorithms> {
        call.respond(
            HttpStatusCode.OK,
            gson.toJson(arrayOf("genetic"))

        )
    }


    get<Paths.listSettingsNames> {
        call.respond(HttpStatusCode.OK,gson.toJson(arrayOf<String>()))
    }


    get<Paths.listTaskNames> {
        call.respond(HttpStatusCode.OK,gson.toJson(arrayOf<String>()))
    }
    

    get<Paths.loadSetting> {
        val name : String = call.receive()
        call.respond(HttpStatusCode.OK, gson.toJson(Setting(
            UUID.randomUUID().toString(),
            name,
            BigDecimal(0),
            BigDecimal(0),
            "genetic"
        )))
    }
    

    get<Paths.loadTask> {
        val name : String = call.receive()
        call.respond(HttpStatusCode.OK,gson.toJson(Task(
            UUID.randomUUID().toString(),
            name,
            arrayOf(),
            Graph(
                UUID.randomUUID().toString(),
                "costGraph",
                GPS(BigDecimal(0), BigDecimal(0)),
                arrayOf(),
                arrayOf(),
                arrayOf(),
                arrayOf()
            )
        )))
    }
    

    delete<Paths.removeObjective> {
        //val name : String = call.receive()
        call.respond(HttpStatusCode.OK)
    }
    

    delete<Paths.removeSalesman> {
        //val name : String = call.receive()
        call.respond(HttpStatusCode.OK)
    }
    

    route("/setup/setting") {
        put {
            //val name : String = call.receive()
            call.respond(HttpStatusCode.OK)
        }
    }
    

    route("/setup/task") {
        put {
            call.respond(HttpStatusCode.OK)
        }
    }
    
}
