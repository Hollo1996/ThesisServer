/**
 * DRP
 * This is the main server of QLM's DRP system
 *
 * OpenAPI spec version: 1.0.0
 * Contact: akos.hollo-szabo@qlndc.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package web

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.*
import io.ktor.routing.Route
import io.ktor.routing.method
import io.ktor.util.pipeline.*


// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * Load algorithm
     * Load algorithm with a name maching the parameter
     * @param body Algorithm name
     */
    @Location("/setup/algorithm") class loadAlgorithm(val body: kotlin.String)

    /**
     * Load task
     * Load task with a name maching the parameter
     * @param body Task name
     */
    @Location("/setup/task") class loadTask(val body: kotlin.String)

    /**
     * Delete objective
     * delete objective specified by name
     * @param body identifier
     */
    @Location("/setup/objective") class removeObjective(val body: kotlin.String)

    /**
     * Delete salesman
     * delete salesman specified by name
     * @param body identifier
     */
    @Location("/setup/salesman") class removeSalesman(val body: kotlin.String)

    /**
     * get best result
     * get best plan for actual transport
     */
    @Location("/optimisation/progress") class getBestResult()

    /**
     * get progress of running algorithm
     * get progress of running algorithm meaning count of iterations and miliseconds of runtime
     */
    @Location("/optimisation/run") class getProgress()

    /**
     * get root between locations
     * get best plan for actual transport
     * @param fromLat lattitude of GPS coords of source location
     * @param fromLong longitude of GPS coords of source location
     * @param toLat lattitude of GPS coords of target location
     * @param toLong longitude of GPS coords of target location
     */
    @Location("/optimisation/root/{fromLat}/{fromLong}/{toLat}/{toLong}") class getRootBetween(val fromLat: java.math.BigDecimal, val fromLong: java.math.BigDecimal, val toLat: java.math.BigDecimal, val toLong: java.math.BigDecimal)

}
