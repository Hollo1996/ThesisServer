/**
 * DRP
 * This is the thesis.main server of QLM's DRP system
 *
 * OpenAPI spec version: 1.0.0
 * Contact: akos.hollo-szabo@qlndc.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package thesis.web.apis

// ktor 0.9.x is missing io.ktor.locations.DELETE, this adds it.
// see https://github.com/ktorio/ktor/issues/288
import com.google.gson.Gson
import io.ktor.application.*
import io.ktor.http.*
import io.ktor.locations.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import org.hibernate.Hibernate
import thesis.core.OAlgorithmManager
import thesis.core.genetic.EGeneticSetup
import thesis.data.OHibernateManager
import thesis.data.web.*
import thesis.web.Paths
import thesis.web.delete
import java.math.BigDecimal
import java.util.*

@KtorExperimentalLocationsAPI
fun Route.SetupApi() {
    val gson = Gson()

    route("/setup/objective") {
        post {
            val obj: Objective = call.receive()
            obj.id = UUID.randomUUID().toString()
            OHibernateManager.saveOrUpdate(obj)
            call.respond(
                HttpStatusCode.OK,
                gson.toJson(obj.id)
            )
        }
    }


    route("/setup/salesman") {
        post {
            val salesman: Salesman = call.receive()
            salesman.id = UUID.randomUUID().toString()
            OHibernateManager.saveOrUpdate(salesman)
            call.respond(
                HttpStatusCode.OK,
                gson.toJson(salesman.id)
            )
        }
    }


    route("/setup/setting") {
        post {
            val setting: Setting = call.receive()
            setting.id = UUID.randomUUID().toString()
            OAlgorithmManager.settings = setting
            call.respond(
                HttpStatusCode.OK,
                gson.toJson(setting.id)
            )
        }
    }


    route("/setup/task") {
        post {
            val task: Task = call.receive()
            if(task.id.isBlank())
                task.id = UUID.randomUUID().toString()
            OAlgorithmManager.task = task
            call.respond(
                HttpStatusCode.OK,
                gson.toJson(task.id)
            )
        }
    }


    get<Paths.listAlgorithms> {
        call.respond(
            HttpStatusCode.OK,
            gson.toJson(arrayOf(EGeneticSetup.values().map { it.code }))

        )
    }


    get<Paths.listSettingsNames> {
        call.respond(HttpStatusCode.OK, gson.toJson(
            OHibernateManager.list<Setting>("Setting").map { it.name }
        ))
    }


    get<Paths.listTaskNames> {
        call.respond(HttpStatusCode.OK, gson.toJson(
            OHibernateManager.list<Task>("Task").map { it.name }
        ))
    }


    get<Paths.loadSetting> {
        val name: String = call.receive()
        val setting = OHibernateManager.findByName<Setting>("Setting", name)
        OAlgorithmManager.settings = setting
        call.respond(HttpStatusCode.OK, gson.toJson(setting))
    }


    get<Paths.loadTask> {
        val name: String = call.receive()
        val task = OHibernateManager.findByName<Task>("Task", name)
        OAlgorithmManager.task = task
        call.respond(HttpStatusCode.OK, gson.toJson(task))
    }


    delete<Paths.removeObjective> {
        val name: String = call.receive()
        val objective = OHibernateManager.findByName<Objective>("Objective", name)
        OHibernateManager.delete(objective)
        call.respond(HttpStatusCode.OK)
    }


    delete<Paths.removeSalesman> {
        val name: String = call.receive()
        val salesman = OHibernateManager.findByName<Salesman>("Salesman", name)
        OHibernateManager.delete(salesman)
        call.respond(HttpStatusCode.OK)
    }


    route("/setup/setting") {
        put {
            val setting = OAlgorithmManager.settings
                ?.also {
                    it.copy(name = call.receive())
                }
            OHibernateManager.saveOrUpdate(setting)
            if (setting == null) call.respond(HttpStatusCode.OK)
            else call.respond(HttpStatusCode.MethodNotAllowed)
        }
    }


    route("/setup/task") {
        put {
            val task = OAlgorithmManager.task
                ?.also {
                    it.copy(name = call.receive())
                }
            OHibernateManager.saveOrUpdate(task)
            if (task == null) call.respond(HttpStatusCode.OK)
            else call.respond(HttpStatusCode.MethodNotAllowed)
        }
    }

}
